// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fir_fir_Pipeline_sample_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_TVALID,
        out_r_TREADY,
        reg_8_reload,
        reg_7_reload,
        reg_6_reload,
        reg_5_reload,
        reg_4_reload,
        reg_3_reload,
        reg_2_reload,
        reg_1_reload,
        reg_reload,
        in_r_TDATA,
        in_r_TREADY,
        a_local_4_reload,
        a_local_6_reload,
        a_local_reload,
        a_local_9_reload,
        a_local_7_reload,
        a_local_8_reload,
        a_local_2_reload,
        a_local_1_reload,
        a_local_5_reload,
        a_local_3_reload,
        out_r_TDATA,
        out_r_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   in_r_TVALID;
input   out_r_TREADY;
input  [31:0] reg_8_reload;
input  [31:0] reg_7_reload;
input  [31:0] reg_6_reload;
input  [31:0] reg_5_reload;
input  [31:0] reg_4_reload;
input  [31:0] reg_3_reload;
input  [31:0] reg_2_reload;
input  [31:0] reg_1_reload;
input  [31:0] reg_reload;
input  [31:0] in_r_TDATA;
output   in_r_TREADY;
input  [31:0] a_local_4_reload;
input  [31:0] a_local_6_reload;
input  [31:0] a_local_reload;
input  [31:0] a_local_9_reload;
input  [31:0] a_local_7_reload;
input  [31:0] a_local_8_reload;
input  [31:0] a_local_2_reload;
input  [31:0] a_local_1_reload;
input  [31:0] a_local_5_reload;
input  [31:0] a_local_3_reload;
output  [31:0] out_r_TDATA;
output   out_r_TVALID;

reg ap_idle;
reg in_r_TREADY;
reg out_r_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln16_reg_602;
reg    ap_block_state2_pp0_stage0_iter1_grp1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln16_fu_339_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_r_TDATA_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    out_r_TDATA_blk_n;
reg    ap_block_pp0_stage0_11001_grp1;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] mul_ln25_fu_245_p2;
reg   [31:0] mul_ln25_reg_606;
wire   [31:0] mul_ln25_1_fu_249_p2;
reg   [31:0] mul_ln25_1_reg_611;
wire   [31:0] mul_ln25_2_fu_253_p2;
reg   [31:0] mul_ln25_2_reg_616;
wire   [31:0] mul_ln25_3_fu_258_p2;
reg   [31:0] mul_ln25_3_reg_621;
wire   [31:0] mul_ln25_4_fu_262_p2;
reg   [31:0] mul_ln25_4_reg_626;
wire   [31:0] mul_ln25_5_fu_266_p2;
reg   [31:0] mul_ln25_5_reg_631;
wire   [31:0] mul_ln25_6_fu_270_p2;
reg   [31:0] mul_ln25_6_reg_636;
wire   [31:0] mul_ln25_7_fu_274_p2;
reg   [31:0] mul_ln25_7_reg_641;
wire   [31:0] mul_ln25_8_fu_278_p2;
reg   [31:0] mul_ln25_8_reg_646;
wire   [31:0] mul_ln25_9_fu_282_p2;
reg   [31:0] mul_ln25_9_reg_651;
reg    ap_condition_exit_pp0_iter1_stage0;
reg   [6:0] n_fu_78;
wire   [6:0] add_ln16_fu_345_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_n_1;
wire    ap_block_pp0_stage0;
reg  signed [31:0] reg_fu_82;
reg  signed [31:0] reg_1_fu_86;
reg  signed [31:0] reg_2_fu_90;
reg  signed [31:0] reg_3_fu_94;
reg  signed [31:0] reg_4_fu_98;
reg  signed [31:0] reg_5_fu_102;
reg  signed [31:0] reg_6_fu_106;
reg  signed [31:0] reg_7_fu_110;
reg  signed [31:0] reg_8_fu_114;
reg    ap_block_pp0_stage0_01001_grp1;
wire   [31:0] add_ln25_1_fu_441_p2;
wire   [31:0] add_ln25_2_fu_445_p2;
wire   [31:0] add_ln25_fu_437_p2;
wire   [31:0] add_ln25_5_fu_460_p2;
wire   [31:0] add_ln25_6_fu_464_p2;
wire   [31:0] add_ln25_4_fu_456_p2;
wire   [31:0] add_ln25_7_fu_469_p2;
wire   [31:0] add_ln25_3_fu_450_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 n_fu_78 = 7'd0;
#0 reg_fu_82 = 32'd0;
#0 reg_1_fu_86 = 32'd0;
#0 reg_2_fu_90 = 32'd0;
#0 reg_3_fu_94 = 32'd0;
#0 reg_4_fu_98 = 32'd0;
#0 reg_5_fu_102 = 32'd0;
#0 reg_6_fu_106 = 32'd0;
#0 reg_7_fu_110 = 32'd0;
#0 reg_8_fu_114 = 32'd0;
#0 ap_done_reg = 1'b0;
end

fir_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U21(
    .din0(reg_6_fu_106),
    .din1(a_local_4_reload),
    .dout(mul_ln25_fu_245_p2)
);

fir_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U22(
    .din0(reg_7_fu_110),
    .din1(a_local_6_reload),
    .dout(mul_ln25_1_fu_249_p2)
);

fir_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U23(
    .din0(in_r_TDATA),
    .din1(a_local_reload),
    .dout(mul_ln25_2_fu_253_p2)
);

fir_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U24(
    .din0(reg_4_fu_98),
    .din1(a_local_9_reload),
    .dout(mul_ln25_3_fu_258_p2)
);

fir_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U25(
    .din0(reg_3_fu_94),
    .din1(a_local_7_reload),
    .dout(mul_ln25_4_fu_262_p2)
);

fir_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U26(
    .din0(reg_8_fu_114),
    .din1(a_local_8_reload),
    .dout(mul_ln25_5_fu_266_p2)
);

fir_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U27(
    .din0(reg_5_fu_102),
    .din1(a_local_2_reload),
    .dout(mul_ln25_6_fu_270_p2)
);

fir_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U28(
    .din0(reg_fu_82),
    .din1(a_local_1_reload),
    .dout(mul_ln25_7_fu_274_p2)
);

fir_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U29(
    .din0(reg_2_fu_90),
    .din1(a_local_5_reload),
    .dout(mul_ln25_8_fu_278_p2)
);

fir_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U30(
    .din0(reg_1_fu_86),
    .din1(a_local_3_reload),
    .dout(mul_ln25_9_fu_282_p2)
);

fir_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln16_fu_339_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            n_fu_78 <= add_ln16_fu_345_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_fu_78 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reg_1_fu_86 <= reg_2_reload;
        end else if (((icmp_ln16_reg_602 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reg_1_fu_86 <= reg_5_fu_102;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reg_2_fu_90 <= reg_4_reload;
        end else if (((icmp_ln16_reg_602 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reg_2_fu_90 <= reg_6_fu_106;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reg_3_fu_94 <= reg_6_reload;
        end else if (((icmp_ln16_reg_602 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reg_3_fu_94 <= reg_7_fu_110;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reg_4_fu_98 <= reg_8_reload;
        end else if (((icmp_ln16_reg_602 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reg_4_fu_98 <= reg_8_fu_114;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reg_5_fu_102 <= reg_1_reload;
        end else if (((icmp_ln16_reg_602 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reg_5_fu_102 <= reg_fu_82;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reg_6_fu_106 <= reg_3_reload;
        end else if (((icmp_ln16_reg_602 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reg_6_fu_106 <= reg_1_fu_86;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reg_7_fu_110 <= reg_5_reload;
        end else if (((icmp_ln16_reg_602 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reg_7_fu_110 <= reg_2_fu_90;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reg_8_fu_114 <= reg_7_reload;
        end else if (((icmp_ln16_reg_602 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reg_8_fu_114 <= reg_3_fu_94;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reg_fu_82 <= reg_reload;
        end else if (((icmp_ln16_reg_602 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            reg_fu_82 <= in_r_TDATA;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln16_reg_602 <= icmp_ln16_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln25_1_reg_611 <= mul_ln25_1_fu_249_p2;
        mul_ln25_2_reg_616 <= mul_ln25_2_fu_253_p2;
        mul_ln25_3_reg_621 <= mul_ln25_3_fu_258_p2;
        mul_ln25_4_reg_626 <= mul_ln25_4_fu_262_p2;
        mul_ln25_5_reg_631 <= mul_ln25_5_fu_266_p2;
        mul_ln25_6_reg_636 <= mul_ln25_6_fu_270_p2;
        mul_ln25_7_reg_641 <= mul_ln25_7_fu_274_p2;
        mul_ln25_8_reg_646 <= mul_ln25_8_fu_278_p2;
        mul_ln25_9_reg_651 <= mul_ln25_9_fu_282_p2;
        mul_ln25_reg_606 <= mul_ln25_fu_245_p2;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_339_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln16_reg_602 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_n_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_n_1 = n_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (icmp_ln16_reg_602 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_r_TDATA_blk_n = in_r_TVALID;
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln16_reg_602 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_r_TREADY = 1'b1;
    end else begin
        in_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_r_TDATA_blk_n = out_r_TREADY;
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_r_TVALID = 1'b1;
    end else begin
        out_r_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_fu_345_p2 = (ap_sig_allocacmp_n_1 + 7'd1);

assign add_ln25_1_fu_441_p2 = (mul_ln25_1_reg_611 + mul_ln25_8_reg_646);

assign add_ln25_2_fu_445_p2 = (add_ln25_1_fu_441_p2 + mul_ln25_4_reg_626);

assign add_ln25_3_fu_450_p2 = (add_ln25_2_fu_445_p2 + add_ln25_fu_437_p2);

assign add_ln25_4_fu_456_p2 = (mul_ln25_reg_606 + mul_ln25_9_reg_651);

assign add_ln25_5_fu_460_p2 = (mul_ln25_7_reg_641 + mul_ln25_2_reg_616);

assign add_ln25_6_fu_464_p2 = (add_ln25_5_fu_460_p2 + mul_ln25_6_reg_636);

assign add_ln25_7_fu_469_p2 = (add_ln25_6_fu_464_p2 + add_ln25_4_fu_456_p2);

assign add_ln25_fu_437_p2 = (mul_ln25_5_reg_631 + mul_ln25_3_reg_621);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = (((out_r_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((out_r_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = (((out_r_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1)));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((out_r_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1_grp1 = ((icmp_ln16_reg_602 == 1'd0) & (in_r_TVALID == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln16_fu_339_p2 = ((ap_sig_allocacmp_n_1 == 7'd100) ? 1'b1 : 1'b0);

assign out_r_TDATA = (add_ln25_7_fu_469_p2 + add_ln25_3_fu_450_p2);

endmodule //fir_fir_Pipeline_sample_loop
