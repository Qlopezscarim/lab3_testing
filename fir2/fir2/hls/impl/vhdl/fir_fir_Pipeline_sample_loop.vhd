-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_fir_Pipeline_sample_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_TVALID : IN STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    reg_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_5_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TREADY : OUT STD_LOGIC;
    a_local_4_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    a_local_6_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    a_local_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    a_local_9_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    a_local_7_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    a_local_8_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    a_local_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    a_local_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    a_local_5_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    a_local_3_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TVALID : OUT STD_LOGIC );
end;


architecture behav of fir_fir_Pipeline_sample_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln16_reg_602 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln16_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal mul_ln25_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_1_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_1_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_2_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_2_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_3_fu_258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_3_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_4_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_4_reg_626 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_5_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_5_reg_631 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_6_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_6_reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_7_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_7_reg_641 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_8_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_8_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_9_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_9_reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal n_fu_78 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln16_fu_345_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal reg_fu_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_1_fu_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_2_fu_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_3_fu_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_4_fu_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_5_fu_102 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_6_fu_106 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_7_fu_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_8_fu_114 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal add_ln25_1_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_2_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_5_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_6_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_4_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_7_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_3_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fir_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_1_1_U21 : component fir_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_6_fu_106,
        din1 => a_local_4_reload,
        dout => mul_ln25_fu_245_p2);

    mul_32s_32s_32_1_1_U22 : component fir_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_7_fu_110,
        din1 => a_local_6_reload,
        dout => mul_ln25_1_fu_249_p2);

    mul_32s_32s_32_1_1_U23 : component fir_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => in_r_TDATA,
        din1 => a_local_reload,
        dout => mul_ln25_2_fu_253_p2);

    mul_32s_32s_32_1_1_U24 : component fir_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_4_fu_98,
        din1 => a_local_9_reload,
        dout => mul_ln25_3_fu_258_p2);

    mul_32s_32s_32_1_1_U25 : component fir_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_3_fu_94,
        din1 => a_local_7_reload,
        dout => mul_ln25_4_fu_262_p2);

    mul_32s_32s_32_1_1_U26 : component fir_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_8_fu_114,
        din1 => a_local_8_reload,
        dout => mul_ln25_5_fu_266_p2);

    mul_32s_32s_32_1_1_U27 : component fir_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_5_fu_102,
        din1 => a_local_2_reload,
        dout => mul_ln25_6_fu_270_p2);

    mul_32s_32s_32_1_1_U28 : component fir_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_fu_82,
        din1 => a_local_1_reload,
        dout => mul_ln25_7_fu_274_p2);

    mul_32s_32s_32_1_1_U29 : component fir_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_2_fu_90,
        din1 => a_local_5_reload,
        dout => mul_ln25_8_fu_278_p2);

    mul_32s_32s_32_1_1_U30 : component fir_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_1_fu_86,
        din1 => a_local_3_reload,
        dout => mul_ln25_9_fu_282_p2);

    flow_control_loop_pipe_sequential_init_U : component fir_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    n_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln16_fu_339_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    n_fu_78 <= add_ln16_fu_345_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_78 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    reg_1_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reg_1_fu_86 <= reg_2_reload;
                elsif (((icmp_ln16_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reg_1_fu_86 <= reg_5_fu_102;
                end if;
            end if; 
        end if;
    end process;

    reg_2_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reg_2_fu_90 <= reg_4_reload;
                elsif (((icmp_ln16_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reg_2_fu_90 <= reg_6_fu_106;
                end if;
            end if; 
        end if;
    end process;

    reg_3_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reg_3_fu_94 <= reg_6_reload;
                elsif (((icmp_ln16_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reg_3_fu_94 <= reg_7_fu_110;
                end if;
            end if; 
        end if;
    end process;

    reg_4_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reg_4_fu_98 <= reg_8_reload;
                elsif (((icmp_ln16_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reg_4_fu_98 <= reg_8_fu_114;
                end if;
            end if; 
        end if;
    end process;

    reg_5_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reg_5_fu_102 <= reg_1_reload;
                elsif (((icmp_ln16_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reg_5_fu_102 <= reg_fu_82;
                end if;
            end if; 
        end if;
    end process;

    reg_6_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reg_6_fu_106 <= reg_3_reload;
                elsif (((icmp_ln16_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reg_6_fu_106 <= reg_1_fu_86;
                end if;
            end if; 
        end if;
    end process;

    reg_7_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reg_7_fu_110 <= reg_5_reload;
                elsif (((icmp_ln16_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reg_7_fu_110 <= reg_2_fu_90;
                end if;
            end if; 
        end if;
    end process;

    reg_8_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reg_8_fu_114 <= reg_7_reload;
                elsif (((icmp_ln16_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reg_8_fu_114 <= reg_3_fu_94;
                end if;
            end if; 
        end if;
    end process;

    reg_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reg_fu_82 <= reg_reload;
                elsif (((icmp_ln16_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    reg_fu_82 <= in_r_TDATA;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln16_reg_602 <= icmp_ln16_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln25_1_reg_611 <= mul_ln25_1_fu_249_p2;
                mul_ln25_2_reg_616 <= mul_ln25_2_fu_253_p2;
                mul_ln25_3_reg_621 <= mul_ln25_3_fu_258_p2;
                mul_ln25_4_reg_626 <= mul_ln25_4_fu_262_p2;
                mul_ln25_5_reg_631 <= mul_ln25_5_fu_266_p2;
                mul_ln25_6_reg_636 <= mul_ln25_6_fu_270_p2;
                mul_ln25_7_reg_641 <= mul_ln25_7_fu_274_p2;
                mul_ln25_8_reg_646 <= mul_ln25_8_fu_278_p2;
                mul_ln25_9_reg_651 <= mul_ln25_9_fu_282_p2;
                mul_ln25_reg_606 <= mul_ln25_fu_245_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln16_fu_345_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_1) + unsigned(ap_const_lv7_1));
    add_ln25_1_fu_441_p2 <= std_logic_vector(unsigned(mul_ln25_1_reg_611) + unsigned(mul_ln25_8_reg_646));
    add_ln25_2_fu_445_p2 <= std_logic_vector(unsigned(add_ln25_1_fu_441_p2) + unsigned(mul_ln25_4_reg_626));
    add_ln25_3_fu_450_p2 <= std_logic_vector(unsigned(add_ln25_2_fu_445_p2) + unsigned(add_ln25_fu_437_p2));
    add_ln25_4_fu_456_p2 <= std_logic_vector(unsigned(mul_ln25_reg_606) + unsigned(mul_ln25_9_reg_651));
    add_ln25_5_fu_460_p2 <= std_logic_vector(unsigned(mul_ln25_7_reg_641) + unsigned(mul_ln25_2_reg_616));
    add_ln25_6_fu_464_p2 <= std_logic_vector(unsigned(add_ln25_5_fu_460_p2) + unsigned(mul_ln25_6_reg_636));
    add_ln25_7_fu_469_p2 <= std_logic_vector(unsigned(add_ln25_6_fu_464_p2) + unsigned(add_ln25_4_fu_456_p2));
    add_ln25_fu_437_p2 <= std_logic_vector(unsigned(mul_ln25_5_reg_631) + unsigned(mul_ln25_3_reg_621));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, out_r_TREADY, ap_block_state2_pp0_stage0_iter1_grp1)
    begin
                ap_block_pp0_stage0_01001_grp1 <= (((out_r_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, out_r_TREADY, ap_block_state2_pp0_stage0_iter1_grp1)
    begin
                ap_block_pp0_stage0_11001 <= (((out_r_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1)));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, out_r_TREADY, ap_block_state2_pp0_stage0_iter1_grp1)
    begin
                ap_block_pp0_stage0_11001_grp1 <= (((out_r_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1)));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, out_r_TREADY, ap_block_state2_pp0_stage0_iter1_grp1)
    begin
                ap_block_pp0_stage0_subdone <= (((out_r_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_grp1_assign_proc : process(in_r_TVALID, icmp_ln16_reg_602)
    begin
                ap_block_state2_pp0_stage0_iter1_grp1 <= ((icmp_ln16_reg_602 = ap_const_lv1_0) and (in_r_TVALID = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln16_fu_339_p2)
    begin
        if (((icmp_ln16_fu_339_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln16_reg_602, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln16_reg_602 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_n_1_assign_proc : process(ap_CS_fsm_pp0_stage0, n_fu_78, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_n_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_n_1 <= n_fu_78;
        end if; 
    end process;

    icmp_ln16_fu_339_p2 <= "1" when (ap_sig_allocacmp_n_1 = ap_const_lv7_64) else "0";

    in_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in_r_TVALID, icmp_ln16_reg_602, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (icmp_ln16_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_TDATA_blk_n <= in_r_TVALID;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln16_reg_602, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (icmp_ln16_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_TREADY <= ap_const_logic_1;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    out_r_TDATA <= std_logic_vector(unsigned(add_ln25_7_fu_469_p2) + unsigned(add_ln25_3_fu_450_p2));

    out_r_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, out_r_TREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_r_TDATA_blk_n <= out_r_TREADY;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_r_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_r_TVALID <= ap_const_logic_1;
        else 
            out_r_TVALID <= ap_const_logic_0;
        end if; 
    end process;

end behav;
