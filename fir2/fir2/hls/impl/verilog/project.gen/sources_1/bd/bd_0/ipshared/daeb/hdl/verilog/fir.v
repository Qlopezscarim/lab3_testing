// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_fir,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu48dr-ffvg1517-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.499000,HLS_SYN_LAT=523,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1068,HLS_SYN_LUT=851,HLS_VERSION=2024_2}" *)

module fir (
        ap_clk,
        ap_rst_n,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        a_TDATA,
        a_TVALID,
        a_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
output  [31:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
input  [31:0] a_TDATA;
input   a_TVALID;
output   a_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire    grp_fir_Pipeline_read_a_fu_78_ap_start;
wire    grp_fir_Pipeline_read_a_fu_78_ap_done;
wire    grp_fir_Pipeline_read_a_fu_78_ap_idle;
wire    grp_fir_Pipeline_read_a_fu_78_ap_ready;
wire    grp_fir_Pipeline_read_a_fu_78_a_TREADY;
wire   [31:0] grp_fir_Pipeline_read_a_fu_78_p_out;
wire    grp_fir_Pipeline_read_a_fu_78_p_out_ap_vld;
wire   [31:0] grp_fir_Pipeline_read_a_fu_78_p_out1;
wire    grp_fir_Pipeline_read_a_fu_78_p_out1_ap_vld;
wire   [31:0] grp_fir_Pipeline_read_a_fu_78_p_out2;
wire    grp_fir_Pipeline_read_a_fu_78_p_out2_ap_vld;
wire   [31:0] grp_fir_Pipeline_read_a_fu_78_p_out3;
wire    grp_fir_Pipeline_read_a_fu_78_p_out3_ap_vld;
wire   [31:0] grp_fir_Pipeline_read_a_fu_78_p_out4;
wire    grp_fir_Pipeline_read_a_fu_78_p_out4_ap_vld;
wire   [31:0] grp_fir_Pipeline_read_a_fu_78_p_out5;
wire    grp_fir_Pipeline_read_a_fu_78_p_out5_ap_vld;
wire   [31:0] grp_fir_Pipeline_read_a_fu_78_p_out6;
wire    grp_fir_Pipeline_read_a_fu_78_p_out6_ap_vld;
wire   [31:0] grp_fir_Pipeline_read_a_fu_78_p_out7;
wire    grp_fir_Pipeline_read_a_fu_78_p_out7_ap_vld;
wire   [31:0] grp_fir_Pipeline_read_a_fu_78_p_out8;
wire    grp_fir_Pipeline_read_a_fu_78_p_out8_ap_vld;
wire   [31:0] grp_fir_Pipeline_read_a_fu_78_p_out9;
wire    grp_fir_Pipeline_read_a_fu_78_p_out9_ap_vld;
wire    grp_fir_Pipeline_sample_loop_fu_94_ap_start;
wire    grp_fir_Pipeline_sample_loop_fu_94_ap_done;
wire    grp_fir_Pipeline_sample_loop_fu_94_ap_idle;
wire    grp_fir_Pipeline_sample_loop_fu_94_ap_ready;
wire    grp_fir_Pipeline_sample_loop_fu_94_in_r_TREADY;
wire   [31:0] grp_fir_Pipeline_sample_loop_fu_94_out_r_TDATA;
wire    grp_fir_Pipeline_sample_loop_fu_94_out_r_TVALID;
wire    grp_fir_Pipeline_sample_loop_fu_94_out_r_TREADY;
reg    grp_fir_Pipeline_read_a_fu_78_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_fir_Pipeline_sample_loop_fu_94_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [31:0] out_r_TDATA_reg;
wire    ap_CS_fsm_state6;
wire    regslice_both_out_r_U_apdone_blk;
reg   [5:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    regslice_both_in_r_U_apdone_blk;
wire   [31:0] in_r_TDATA_int_regslice;
wire    in_r_TVALID_int_regslice;
reg    in_r_TREADY_int_regslice;
wire    regslice_both_in_r_U_ack_in;
reg   [31:0] out_r_TDATA_int_regslice;
wire    out_r_TREADY_int_regslice;
wire    regslice_both_out_r_U_vld_out;
wire    regslice_both_a_U_apdone_blk;
wire   [31:0] a_TDATA_int_regslice;
wire    a_TVALID_int_regslice;
reg    a_TREADY_int_regslice;
wire    regslice_both_a_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 grp_fir_Pipeline_read_a_fu_78_ap_start_reg = 1'b0;
#0 grp_fir_Pipeline_sample_loop_fu_94_ap_start_reg = 1'b0;
end

fir_fir_Pipeline_read_a grp_fir_Pipeline_read_a_fu_78(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fir_Pipeline_read_a_fu_78_ap_start),
    .ap_done(grp_fir_Pipeline_read_a_fu_78_ap_done),
    .ap_idle(grp_fir_Pipeline_read_a_fu_78_ap_idle),
    .ap_ready(grp_fir_Pipeline_read_a_fu_78_ap_ready),
    .a_TVALID(a_TVALID_int_regslice),
    .a_TDATA(a_TDATA_int_regslice),
    .a_TREADY(grp_fir_Pipeline_read_a_fu_78_a_TREADY),
    .p_out(grp_fir_Pipeline_read_a_fu_78_p_out),
    .p_out_ap_vld(grp_fir_Pipeline_read_a_fu_78_p_out_ap_vld),
    .p_out1(grp_fir_Pipeline_read_a_fu_78_p_out1),
    .p_out1_ap_vld(grp_fir_Pipeline_read_a_fu_78_p_out1_ap_vld),
    .p_out2(grp_fir_Pipeline_read_a_fu_78_p_out2),
    .p_out2_ap_vld(grp_fir_Pipeline_read_a_fu_78_p_out2_ap_vld),
    .p_out3(grp_fir_Pipeline_read_a_fu_78_p_out3),
    .p_out3_ap_vld(grp_fir_Pipeline_read_a_fu_78_p_out3_ap_vld),
    .p_out4(grp_fir_Pipeline_read_a_fu_78_p_out4),
    .p_out4_ap_vld(grp_fir_Pipeline_read_a_fu_78_p_out4_ap_vld),
    .p_out5(grp_fir_Pipeline_read_a_fu_78_p_out5),
    .p_out5_ap_vld(grp_fir_Pipeline_read_a_fu_78_p_out5_ap_vld),
    .p_out6(grp_fir_Pipeline_read_a_fu_78_p_out6),
    .p_out6_ap_vld(grp_fir_Pipeline_read_a_fu_78_p_out6_ap_vld),
    .p_out7(grp_fir_Pipeline_read_a_fu_78_p_out7),
    .p_out7_ap_vld(grp_fir_Pipeline_read_a_fu_78_p_out7_ap_vld),
    .p_out8(grp_fir_Pipeline_read_a_fu_78_p_out8),
    .p_out8_ap_vld(grp_fir_Pipeline_read_a_fu_78_p_out8_ap_vld),
    .p_out9(grp_fir_Pipeline_read_a_fu_78_p_out9),
    .p_out9_ap_vld(grp_fir_Pipeline_read_a_fu_78_p_out9_ap_vld)
);

fir_fir_Pipeline_sample_loop grp_fir_Pipeline_sample_loop_fu_94(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_fir_Pipeline_sample_loop_fu_94_ap_start),
    .ap_done(grp_fir_Pipeline_sample_loop_fu_94_ap_done),
    .ap_idle(grp_fir_Pipeline_sample_loop_fu_94_ap_idle),
    .ap_ready(grp_fir_Pipeline_sample_loop_fu_94_ap_ready),
    .in_r_TDATA(in_r_TDATA_int_regslice),
    .in_r_TVALID(in_r_TVALID_int_regslice),
    .in_r_TREADY(grp_fir_Pipeline_sample_loop_fu_94_in_r_TREADY),
    .p_reload26(grp_fir_Pipeline_read_a_fu_78_p_out8),
    .p_reload25(grp_fir_Pipeline_read_a_fu_78_p_out7),
    .p_reload(grp_fir_Pipeline_read_a_fu_78_p_out),
    .p_reload27(grp_fir_Pipeline_read_a_fu_78_p_out9),
    .p_reload21(grp_fir_Pipeline_read_a_fu_78_p_out3),
    .p_reload23(grp_fir_Pipeline_read_a_fu_78_p_out5),
    .p_reload19(grp_fir_Pipeline_read_a_fu_78_p_out1),
    .p_reload20(grp_fir_Pipeline_read_a_fu_78_p_out2),
    .p_reload24(grp_fir_Pipeline_read_a_fu_78_p_out6),
    .p_reload22(grp_fir_Pipeline_read_a_fu_78_p_out4),
    .out_r_TDATA(grp_fir_Pipeline_sample_loop_fu_94_out_r_TDATA),
    .out_r_TVALID(grp_fir_Pipeline_sample_loop_fu_94_out_r_TVALID),
    .out_r_TREADY(grp_fir_Pipeline_sample_loop_fu_94_out_r_TREADY)
);

fir_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

fir_regslice_both #(
    .DataWidth( 32 ))
regslice_both_in_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_r_TDATA),
    .vld_in(in_r_TVALID),
    .ack_in(regslice_both_in_r_U_ack_in),
    .data_out(in_r_TDATA_int_regslice),
    .vld_out(in_r_TVALID_int_regslice),
    .ack_out(in_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_r_U_apdone_blk)
);

fir_regslice_both #(
    .DataWidth( 32 ))
regslice_both_out_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_TDATA_int_regslice),
    .vld_in(grp_fir_Pipeline_sample_loop_fu_94_out_r_TVALID),
    .ack_in(out_r_TREADY_int_regslice),
    .data_out(out_r_TDATA),
    .vld_out(regslice_both_out_r_U_vld_out),
    .ack_out(out_r_TREADY),
    .apdone_blk(regslice_both_out_r_U_apdone_blk)
);

fir_regslice_both #(
    .DataWidth( 32 ))
regslice_both_a_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(a_TDATA),
    .vld_in(a_TVALID),
    .ack_in(regslice_both_a_U_ack_in),
    .data_out(a_TDATA_int_regslice),
    .vld_out(a_TVALID_int_regslice),
    .ack_out(a_TREADY_int_regslice),
    .apdone_blk(regslice_both_a_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((regslice_both_out_r_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_fir_Pipeline_read_a_fu_78_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_fir_Pipeline_read_a_fu_78_ap_start_reg <= 1'b1;
        end else if ((grp_fir_Pipeline_read_a_fu_78_ap_ready == 1'b1)) begin
            grp_fir_Pipeline_read_a_fu_78_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_fir_Pipeline_sample_loop_fu_94_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_fir_Pipeline_sample_loop_fu_94_ap_start_reg <= 1'b1;
        end else if ((grp_fir_Pipeline_sample_loop_fu_94_ap_ready == 1'b1)) begin
            grp_fir_Pipeline_sample_loop_fu_94_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((grp_fir_Pipeline_sample_loop_fu_94_out_r_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        out_r_TDATA_reg <= grp_fir_Pipeline_sample_loop_fu_94_out_r_TDATA;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_TREADY_int_regslice = grp_fir_Pipeline_read_a_fu_78_a_TREADY;
    end else begin
        a_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_fir_Pipeline_read_a_fu_78_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_fir_Pipeline_sample_loop_fu_94_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_out_r_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_r_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_r_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_r_TREADY_int_regslice = grp_fir_Pipeline_sample_loop_fu_94_in_r_TREADY;
    end else begin
        in_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((grp_fir_Pipeline_sample_loop_fu_94_out_r_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        out_r_TDATA_int_regslice = grp_fir_Pipeline_sample_loop_fu_94_out_r_TDATA;
    end else begin
        out_r_TDATA_int_regslice = out_r_TDATA_reg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_fir_Pipeline_read_a_fu_78_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_fir_Pipeline_sample_loop_fu_94_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((regslice_both_out_r_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_TREADY = regslice_both_a_U_ack_in;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_fir_Pipeline_read_a_fu_78_ap_start = grp_fir_Pipeline_read_a_fu_78_ap_start_reg;

assign grp_fir_Pipeline_sample_loop_fu_94_ap_start = grp_fir_Pipeline_sample_loop_fu_94_ap_start_reg;

assign grp_fir_Pipeline_sample_loop_fu_94_out_r_TREADY = (out_r_TREADY_int_regslice & ap_CS_fsm_state5);

assign in_r_TREADY = regslice_both_in_r_U_ack_in;

assign out_r_TVALID = regslice_both_out_r_U_vld_out;


reg find_kernel_block = 0;
// synthesis translate_off
`include "fir_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //fir

