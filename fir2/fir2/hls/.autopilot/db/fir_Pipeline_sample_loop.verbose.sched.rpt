

================================================================
== Vitis HLS Report for 'fir_Pipeline_sample_loop'
================================================================
* Date:           Tue Feb  4 14:53:48 2025

* Version:        2024.2 (Build 5238294 on Nov  8 2024)
* Project:        fir2
* Solution:       hls (Vitis Kernel Flow Target)
* Product family: zynquplusRFSOC
* Target device:  xczu48dr-ffvg1517-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+---------+----------+------------+
    |  Clock |  Target | Estimated| Uncertainty|
    +--------+---------+----------+------------+
    |ap_clk  |  5.00 ns|  3.499 ns|     1.35 ns|
    +--------+---------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+------------------------------------------------+
    |  Latency (cycles) |  Latency (absolute) |  Interval |                    Pipeline                    |
    |   min   |   max   |    min   |    max   | min | max |                      Type                      |
    +---------+---------+----------+----------+-----+-----+------------------------------------------------+
    |      103|      103|  0.515 us|  0.515 us|  101|  101|  loop auto-rewind stp (delay=0 clock cycles(s))|
    +---------+---------+----------+----------+-----+-----+------------------------------------------------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +---------------+---------+---------+----------+-----------+-----------+------+----------+
        |               |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |   Loop Name   |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +---------------+---------+---------+----------+-----------+-----------+------+----------+
        |- sample_loop  |      101|      101|         3|          1|          1|   100|       yes|
        +---------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 3
* Pipeline : 1
  Pipeline-0 : II = 1, D = 3, States = { 1 2 3 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.62>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%n = alloca i32 1" [fir.cpp:16]   --->   Operation 6 'alloca' 'n' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%reg = alloca i32 1" [fir.cpp:9]   --->   Operation 7 'alloca' 'reg' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%reg_1 = alloca i32 1" [fir.cpp:9]   --->   Operation 8 'alloca' 'reg_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%reg_2 = alloca i32 1" [fir.cpp:9]   --->   Operation 9 'alloca' 'reg_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%reg_3 = alloca i32 1" [fir.cpp:9]   --->   Operation 10 'alloca' 'reg_3' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%reg_4 = alloca i32 1" [fir.cpp:9]   --->   Operation 11 'alloca' 'reg_4' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%reg_5 = alloca i32 1" [fir.cpp:9]   --->   Operation 12 'alloca' 'reg_5' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%reg_6 = alloca i32 1" [fir.cpp:9]   --->   Operation 13 'alloca' 'reg_6' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%reg_7 = alloca i32 1" [fir.cpp:9]   --->   Operation 14 'alloca' 'reg_7' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%reg_8 = alloca i32 1" [fir.cpp:9]   --->   Operation 15 'alloca' 'reg_8' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 %out_r, void @empty_0, i32 0, i32 0, void @empty_1, i32 0, i32 0, void @empty, void @empty, void @empty, i32 0, i32 0, i32 0, i32 0, void @empty, void @empty, i32 4294967295, i32 0, i32 0"   --->   Operation 16 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i32 %in_r, void @empty_0, i32 0, i32 0, void @empty_1, i32 0, i32 0, void @empty, void @empty, void @empty, i32 0, i32 0, i32 0, i32 0, void @empty, void @empty, i32 4294967295, i32 0, i32 0"   --->   Operation 17 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%a_local_3_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %a_local_3_reload"   --->   Operation 18 'read' 'a_local_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%a_local_5_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %a_local_5_reload"   --->   Operation 19 'read' 'a_local_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%a_local_1_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %a_local_1_reload"   --->   Operation 20 'read' 'a_local_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%a_local_2_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %a_local_2_reload"   --->   Operation 21 'read' 'a_local_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%a_local_8_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %a_local_8_reload"   --->   Operation 22 'read' 'a_local_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%a_local_7_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %a_local_7_reload"   --->   Operation 23 'read' 'a_local_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%a_local_9_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %a_local_9_reload"   --->   Operation 24 'read' 'a_local_9_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%a_local_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %a_local_reload"   --->   Operation 25 'read' 'a_local_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%a_local_6_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %a_local_6_reload"   --->   Operation 26 'read' 'a_local_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%a_local_4_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %a_local_4_reload"   --->   Operation 27 'read' 'a_local_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%reg_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %reg_reload"   --->   Operation 28 'read' 'reg_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.00ns)   --->   "%reg_1_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %reg_1_reload"   --->   Operation 29 'read' 'reg_1_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 30 [1/1] (0.00ns)   --->   "%reg_2_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %reg_2_reload"   --->   Operation 30 'read' 'reg_2_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%reg_3_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %reg_3_reload"   --->   Operation 31 'read' 'reg_3_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%reg_4_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %reg_4_reload"   --->   Operation 32 'read' 'reg_4_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%reg_5_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %reg_5_reload"   --->   Operation 33 'read' 'reg_5_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%reg_6_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %reg_6_reload"   --->   Operation 34 'read' 'reg_6_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%reg_7_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %reg_7_reload"   --->   Operation 35 'read' 'reg_7_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "%reg_8_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %reg_8_reload"   --->   Operation 36 'read' 'reg_8_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_7_reload_read, i32 %reg_8" [fir.cpp:9]   --->   Operation 37 'store' 'store_ln9' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 38 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_5_reload_read, i32 %reg_7" [fir.cpp:9]   --->   Operation 38 'store' 'store_ln9' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 39 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_3_reload_read, i32 %reg_6" [fir.cpp:9]   --->   Operation 39 'store' 'store_ln9' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 40 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_1_reload_read, i32 %reg_5" [fir.cpp:9]   --->   Operation 40 'store' 'store_ln9' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 41 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_8_reload_read, i32 %reg_4" [fir.cpp:9]   --->   Operation 41 'store' 'store_ln9' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 42 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_6_reload_read, i32 %reg_3" [fir.cpp:9]   --->   Operation 42 'store' 'store_ln9' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 43 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_4_reload_read, i32 %reg_2" [fir.cpp:9]   --->   Operation 43 'store' 'store_ln9' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 44 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_2_reload_read, i32 %reg_1" [fir.cpp:9]   --->   Operation 44 'store' 'store_ln9' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 45 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_reload_read, i32 %reg" [fir.cpp:9]   --->   Operation 45 'store' 'store_ln9' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 46 [1/1] (0.42ns)   --->   "%store_ln16 = store i7 0, i7 %n" [fir.cpp:16]   --->   Operation 46 'store' 'store_ln16' <Predicate = true> <Delay = 0.42>
ST_1 : Operation 47 [1/1] (0.00ns)   --->   "%br_ln16 = br void %shift_loop" [fir.cpp:16]   --->   Operation 47 'br' 'br_ln16' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 48 [1/1] (0.00ns)   --->   "%n_1 = load i7 %n" [fir.cpp:16]   --->   Operation 48 'load' 'n_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 49 [1/1] (0.77ns)   --->   "%icmp_ln16 = icmp_eq  i7 %n_1, i7 100" [fir.cpp:16]   --->   Operation 49 'icmp' 'icmp_ln16' <Predicate = true> <Delay = 0.77> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 50 [1/1] (0.77ns)   --->   "%add_ln16 = add i7 %n_1, i7 1" [fir.cpp:16]   --->   Operation 50 'add' 'add_ln16' <Predicate = true> <Delay = 0.77> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 51 [1/1] (0.00ns)   --->   "%br_ln16 = br i1 %icmp_ln16, void %shift_loop.split, void %for.end37.exitStub" [fir.cpp:16]   --->   Operation 51 'br' 'br_ln16' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 52 [1/1] (0.42ns)   --->   "%store_ln16 = store i7 %add_ln16, i7 %n" [fir.cpp:16]   --->   Operation 52 'store' 'store_ln16' <Predicate = (!icmp_ln16)> <Delay = 0.42>

State 2 <SV = 1> <Delay = 3.49>
ST_2 : Operation 53 [1/1] (0.00ns)   --->   "%reg_9 = load i32 %reg_5" [fir.cpp:25]   --->   Operation 53 'load' 'reg_9' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 54 [1/1] (0.00ns)   --->   "%reg_10 = load i32 %reg_6" [fir.cpp:25]   --->   Operation 54 'load' 'reg_10' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 55 [1/1] (0.00ns)   --->   "%reg_11 = load i32 %reg_7" [fir.cpp:25]   --->   Operation 55 'load' 'reg_11' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 56 [1/1] (0.00ns)   --->   "%reg_12 = load i32 %reg_8" [fir.cpp:25]   --->   Operation 56 'load' 'reg_12' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 57 [1/1] (0.00ns)   --->   "%reg_load = load i32 %reg" [fir.cpp:9]   --->   Operation 57 'load' 'reg_load' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_2 : Operation 58 [1/1] (0.00ns)   --->   "%reg_1_load = load i32 %reg_1" [fir.cpp:9]   --->   Operation 58 'load' 'reg_1_load' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_2 : Operation 59 [1/1] (0.00ns)   --->   "%reg_2_load = load i32 %reg_2" [fir.cpp:9]   --->   Operation 59 'load' 'reg_2_load' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_2 : Operation 60 [1/1] (0.00ns)   --->   "%reg_3_load = load i32 %reg_3" [fir.cpp:9]   --->   Operation 60 'load' 'reg_3_load' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_2 : Operation 61 [1/1] (0.00ns)   --->   "%reg_4_load = load i32 %reg_4" [fir.cpp:25]   --->   Operation 61 'load' 'reg_4_load' <Predicate = (!icmp_ln16)> <Delay = 0.00>
ST_2 : Operation 62 [1/1] (0.07ns)   --->   "%reg_13 = read i32 @_ssdm_op_Read.axis.volatile.i32P128A, i32 %in_r" [fir.cpp:21]   --->   Operation 62 'read' 'reg_13' <Predicate = (!icmp_ln16)> <Delay = 0.07> <CoreInst = "regslice">   --->   Core 147 'regslice' <Latency = 0> <II = 1> <Delay = 0.65> <Adapter> <Opcode : 'read' 'write'>
ST_2 : Operation 63 [1/1] (3.42ns)   --->   "%mul_ln25 = mul i32 %reg_10, i32 %a_local_4_reload_read" [fir.cpp:25]   --->   Operation 63 'mul' 'mul_ln25' <Predicate = (!icmp_ln16)> <Delay = 3.42> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 64 [1/1] (3.42ns)   --->   "%mul_ln25_1 = mul i32 %reg_11, i32 %a_local_6_reload_read" [fir.cpp:25]   --->   Operation 64 'mul' 'mul_ln25_1' <Predicate = (!icmp_ln16)> <Delay = 3.42> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 65 [1/1] (3.42ns)   --->   "%mul_ln25_2 = mul i32 %reg_13, i32 %a_local_reload_read" [fir.cpp:25]   --->   Operation 65 'mul' 'mul_ln25_2' <Predicate = (!icmp_ln16)> <Delay = 3.42> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 66 [1/1] (3.42ns)   --->   "%mul_ln25_3 = mul i32 %reg_4_load, i32 %a_local_9_reload_read" [fir.cpp:25]   --->   Operation 66 'mul' 'mul_ln25_3' <Predicate = (!icmp_ln16)> <Delay = 3.42> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 67 [1/1] (3.42ns)   --->   "%mul_ln25_4 = mul i32 %reg_3_load, i32 %a_local_7_reload_read" [fir.cpp:25]   --->   Operation 67 'mul' 'mul_ln25_4' <Predicate = (!icmp_ln16)> <Delay = 3.42> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 68 [1/1] (3.42ns)   --->   "%mul_ln25_5 = mul i32 %reg_12, i32 %a_local_8_reload_read" [fir.cpp:25]   --->   Operation 68 'mul' 'mul_ln25_5' <Predicate = (!icmp_ln16)> <Delay = 3.42> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 69 [1/1] (3.42ns)   --->   "%mul_ln25_6 = mul i32 %reg_9, i32 %a_local_2_reload_read" [fir.cpp:25]   --->   Operation 69 'mul' 'mul_ln25_6' <Predicate = (!icmp_ln16)> <Delay = 3.42> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 70 [1/1] (3.42ns)   --->   "%mul_ln25_7 = mul i32 %reg_load, i32 %a_local_1_reload_read" [fir.cpp:25]   --->   Operation 70 'mul' 'mul_ln25_7' <Predicate = (!icmp_ln16)> <Delay = 3.42> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 71 [1/1] (3.42ns)   --->   "%mul_ln25_8 = mul i32 %reg_2_load, i32 %a_local_5_reload_read" [fir.cpp:25]   --->   Operation 71 'mul' 'mul_ln25_8' <Predicate = (!icmp_ln16)> <Delay = 3.42> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 72 [1/1] (3.42ns)   --->   "%mul_ln25_9 = mul i32 %reg_1_load, i32 %a_local_3_reload_read" [fir.cpp:25]   --->   Operation 72 'mul' 'mul_ln25_9' <Predicate = (!icmp_ln16)> <Delay = 3.42> <CoreInst = "Multiplier">   --->   Core 3 'Multiplier' <Latency = 0> <II = 1> <Delay = 3.42> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 73 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_3_load, i32 %reg_8" [fir.cpp:9]   --->   Operation 73 'store' 'store_ln9' <Predicate = (!icmp_ln16)> <Delay = 0.42>
ST_2 : Operation 74 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_2_load, i32 %reg_7" [fir.cpp:9]   --->   Operation 74 'store' 'store_ln9' <Predicate = (!icmp_ln16)> <Delay = 0.42>
ST_2 : Operation 75 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_1_load, i32 %reg_6" [fir.cpp:9]   --->   Operation 75 'store' 'store_ln9' <Predicate = (!icmp_ln16)> <Delay = 0.42>
ST_2 : Operation 76 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_load, i32 %reg_5" [fir.cpp:9]   --->   Operation 76 'store' 'store_ln9' <Predicate = (!icmp_ln16)> <Delay = 0.42>
ST_2 : Operation 77 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_12, i32 %reg_4" [fir.cpp:9]   --->   Operation 77 'store' 'store_ln9' <Predicate = (!icmp_ln16)> <Delay = 0.42>
ST_2 : Operation 78 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_11, i32 %reg_3" [fir.cpp:9]   --->   Operation 78 'store' 'store_ln9' <Predicate = (!icmp_ln16)> <Delay = 0.42>
ST_2 : Operation 79 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_10, i32 %reg_2" [fir.cpp:9]   --->   Operation 79 'store' 'store_ln9' <Predicate = (!icmp_ln16)> <Delay = 0.42>
ST_2 : Operation 80 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_9, i32 %reg_1" [fir.cpp:9]   --->   Operation 80 'store' 'store_ln9' <Predicate = (!icmp_ln16)> <Delay = 0.42>
ST_2 : Operation 81 [1/1] (0.42ns)   --->   "%store_ln9 = store i32 %reg_13, i32 %reg" [fir.cpp:9]   --->   Operation 81 'store' 'store_ln9' <Predicate = (!icmp_ln16)> <Delay = 0.42>
ST_2 : Operation 96 [1/1] (0.42ns)   --->   "%ret_ln0 = ret"   --->   Operation 96 'ret' 'ret_ln0' <Predicate = (icmp_ln16)> <Delay = 0.42>

State 3 <SV = 2> <Delay = 2.69>
ST_3 : Operation 82 [1/1] (0.00ns)   --->   "%specpipeline_ln9 = specpipeline void @_ssdm_op_SpecPipeline, i32 4294967295, i32 0, i32 0, i32 0, void @empty" [fir.cpp:9]   --->   Operation 82 'specpipeline' 'specpipeline_ln9' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 83 [1/1] (0.00ns)   --->   "%speclooptripcount_ln9 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 100, i64 100, i64 100" [fir.cpp:9]   --->   Operation 83 'speclooptripcount' 'speclooptripcount_ln9' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 84 [1/1] (0.00ns)   --->   "%specloopname_ln16 = specloopname void @_ssdm_op_SpecLoopName, void @empty_6" [fir.cpp:16]   --->   Operation 84 'specloopname' 'specloopname_ln16' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 85 [1/1] (1.01ns)   --->   "%add_ln25 = add i32 %mul_ln25_5, i32 %mul_ln25_3" [fir.cpp:25]   --->   Operation 85 'add' 'add_ln25' <Predicate = true> <Delay = 1.01> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.01> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 86 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln25_1 = add i32 %mul_ln25_1, i32 %mul_ln25_8" [fir.cpp:25]   --->   Operation 86 'add' 'add_ln25_1' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.36> <IPBlock> <Opcode : '' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 87 [1/1] (0.73ns) (root node of TernaryAdder)   --->   "%add_ln25_2 = add i32 %add_ln25_1, i32 %mul_ln25_4" [fir.cpp:25]   --->   Operation 87 'add' 'add_ln25_2' <Predicate = true> <Delay = 0.73> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.36> <IPBlock> <Opcode : '' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 88 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln25_3 = add i32 %add_ln25_2, i32 %add_ln25" [fir.cpp:25]   --->   Operation 88 'add' 'add_ln25_3' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.36> <IPBlock> <Opcode : '' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 89 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln25_4 = add i32 %mul_ln25, i32 %mul_ln25_9" [fir.cpp:25]   --->   Operation 89 'add' 'add_ln25_4' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.36> <IPBlock> <Opcode : '' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 90 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln25_5 = add i32 %mul_ln25_7, i32 %mul_ln25_2" [fir.cpp:25]   --->   Operation 90 'add' 'add_ln25_5' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.36> <IPBlock> <Opcode : '' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 91 [1/1] (0.73ns) (root node of TernaryAdder)   --->   "%add_ln25_6 = add i32 %add_ln25_5, i32 %mul_ln25_6" [fir.cpp:25]   --->   Operation 91 'add' 'add_ln25_6' <Predicate = true> <Delay = 0.73> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.36> <IPBlock> <Opcode : '' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 92 [1/1] (0.73ns) (root node of TernaryAdder)   --->   "%add_ln25_7 = add i32 %add_ln25_6, i32 %add_ln25_4" [fir.cpp:25]   --->   Operation 92 'add' 'add_ln25_7' <Predicate = true> <Delay = 0.73> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.36> <IPBlock> <Opcode : '' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 93 [1/1] (0.73ns) (root node of TernaryAdder)   --->   "%y = add i32 %add_ln25_7, i32 %add_ln25_3" [fir.cpp:25]   --->   Operation 93 'add' 'y' <Predicate = true> <Delay = 0.73> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.36> <IPBlock> <Opcode : '' 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 94 [1/1] (0.49ns)   --->   "%write_ln29 = write void @_ssdm_op_Write.axis.volatile.i32P128A, i32 %out_r, i32 %y" [fir.cpp:29]   --->   Operation 94 'write' 'write_ln29' <Predicate = true> <Delay = 0.49> <CoreInst = "regslice">   --->   Core 147 'regslice' <Latency = 0> <II = 1> <Delay = 0.65> <Adapter> <Opcode : 'read' 'write'>
ST_3 : Operation 95 [1/1] (0.00ns)   --->   "%br_ln16 = br void %shift_loop" [fir.cpp:16]   --->   Operation 95 'br' 'br_ln16' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 5.000ns, clock uncertainty: 1.350ns.

 <State 1>: 1.627ns
The critical path consists of the following:
	'store' operation 0 bit ('store_ln16', fir.cpp:16) of constant 0 on local variable 'n', fir.cpp:16 [62]  (0.427 ns)
	'load' operation 7 bit ('n', fir.cpp:16) on local variable 'n', fir.cpp:16 [65]  (0.000 ns)
	'icmp' operation 1 bit ('icmp_ln16', fir.cpp:16) [70]  (0.773 ns)
	'store' operation 0 bit ('store_ln16', fir.cpp:16) of variable 'add_ln16', fir.cpp:16 on local variable 'n', fir.cpp:16 [112]  (0.427 ns)

 <State 2>: 3.499ns
The critical path consists of the following:
	axis read operation ('reg', fir.cpp:21) on port 'in_r' (fir.cpp:21) [82]  (0.079 ns)
	'mul' operation 32 bit ('mul_ln25_2', fir.cpp:25) [85]  (3.420 ns)

 <State 3>: 2.690ns
The critical path consists of the following:
	'add' operation 32 bit ('add_ln25_5', fir.cpp:25) [98]  (0.000 ns)
	'add' operation 32 bit ('add_ln25_6', fir.cpp:25) [99]  (0.731 ns)
	'add' operation 32 bit ('add_ln25_7', fir.cpp:25) [100]  (0.731 ns)
	'add' operation 32 bit ('y', fir.cpp:25) [101]  (0.731 ns)
	axis write operation ('write_ln29', fir.cpp:29) on port 'out_r' (fir.cpp:29) [102]  (0.497 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
